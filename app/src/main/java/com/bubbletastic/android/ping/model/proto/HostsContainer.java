// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: protos.proto at 23:1
package com.bubbletastic.android.ping.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class HostsContainer extends Message<HostsContainer, HostsContainer.Builder> {
  public static final ProtoAdapter<HostsContainer> ADAPTER = new ProtoAdapter_HostsContainer();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.bubbletastic.android.ping.model.proto.ProtoHost#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ProtoHost> hosts;

  public HostsContainer(List<ProtoHost> hosts) {
    this(hosts, ByteString.EMPTY);
  }

  public HostsContainer(List<ProtoHost> hosts, ByteString unknownFields) {
    super(unknownFields);
    this.hosts = immutableCopyOf("hosts", hosts);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.hosts = copyOf("hosts", hosts);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HostsContainer)) return false;
    HostsContainer o = (HostsContainer) other;
    return equals(unknownFields(), o.unknownFields())
        && equals(hosts, o.hosts);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (hosts != null ? hosts.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (hosts != null) builder.append(", hosts=").append(hosts);
    return builder.replace(0, 2, "HostsContainer{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HostsContainer, Builder> {
    public List<ProtoHost> hosts;

    public Builder() {
      hosts = newMutableList();
    }

    public Builder hosts(List<ProtoHost> hosts) {
      checkElementsNotNull(hosts);
      this.hosts = hosts;
      return this;
    }

    @Override
    public HostsContainer build() {
      return new HostsContainer(hosts, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HostsContainer extends ProtoAdapter<HostsContainer> {
    ProtoAdapter_HostsContainer() {
      super(FieldEncoding.LENGTH_DELIMITED, HostsContainer.class);
    }

    @Override
    public int encodedSize(HostsContainer value) {
      return ProtoHost.ADAPTER.asRepeated().encodedSizeWithTag(1, value.hosts)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HostsContainer value) throws IOException {
      if (value.hosts != null) ProtoHost.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.hosts);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HostsContainer decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.hosts.add(ProtoHost.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HostsContainer redact(HostsContainer value) {
      Builder builder = value.newBuilder();
      redactElements(builder.hosts, ProtoHost.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
