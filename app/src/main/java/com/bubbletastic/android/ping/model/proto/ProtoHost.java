// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../app/proto/protos.proto
package com.bubbletastic.android.ping.model.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class ProtoHost extends Message {
  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_HOST_NAME = "";
  public static final Long DEFAULT_REFRESHED = 0L;
  public static final HostStatus DEFAULT_STATUS = HostStatus.unknown;

  @ProtoField(tag = 1, type = STRING)
  public final String host_name;

  @ProtoField(tag = 2, type = INT64)
  public final Long refreshed;

  @ProtoField(tag = 3, type = ENUM)
  public final HostStatus status;

  public ProtoHost(String host_name, Long refreshed, HostStatus status) {
    this.host_name = host_name;
    this.refreshed = refreshed;
    this.status = status;
  }

  private ProtoHost(Builder builder) {
    this(builder.host_name, builder.refreshed, builder.status);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ProtoHost)) return false;
    ProtoHost o = (ProtoHost) other;
    return equals(host_name, o.host_name)
        && equals(refreshed, o.refreshed)
        && equals(status, o.status);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = host_name != null ? host_name.hashCode() : 0;
      result = result * 37 + (refreshed != null ? refreshed.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ProtoHost> {

    public String host_name;
    public Long refreshed;
    public HostStatus status;

    public Builder() {
    }

    public Builder(ProtoHost message) {
      super(message);
      if (message == null) return;
      this.host_name = message.host_name;
      this.refreshed = message.refreshed;
      this.status = message.status;
    }

    public Builder host_name(String host_name) {
      this.host_name = host_name;
      return this;
    }

    public Builder refreshed(Long refreshed) {
      this.refreshed = refreshed;
      return this;
    }

    public Builder status(HostStatus status) {
      this.status = status;
      return this;
    }

    @Override
    public ProtoHost build() {
      return new ProtoHost(this);
    }
  }
}
